<UserControl x:Class="WpfPlotDigitizer.AxLimPage"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:WpfPlotDigitizer"
             xmlns:cycMVVM="clr-namespace:CycWpfLibrary.MVVM;assembly=CycWpfLibrary"
             xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:controlzEx="clr-namespace:ControlzEx;assembly=MaterialDesignThemes.Wpf"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:cycControl="clr-namespace:CycWpfLibrary.Controls;assembly=CycWpfLibrary"
             TextElement.Foreground="{DynamicResource MaterialDesignBody}"
             TextElement.FontWeight="Regular"
             TextElement.FontSize="13"
             TextOptions.TextFormattingMode="Ideal"
             TextOptions.TextRenderingMode="Auto"
             Background="{DynamicResource MaterialDesignPaper}"
             FontFamily="{DynamicResource MaterialDesignFont}"
             mc:Ignorable="d"
             d:DesignHeight="600"
             d:DesignWidth="900"
             d:DataContext="{d:DesignInstance local:AxLimPageVM, IsDesignTimeCreatable=True}">
  <AdornerDecorator>
    <Grid Margin="20,0">
      <Grid.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <ControlTemplate x:Key="ValidationErrorTemplate">
          <ControlTemplate.Resources>
            <DataTemplate DataType="{x:Type ValidationError}">
              <TextBlock Foreground="{DynamicResource ValidationErrorBrush}"
                         FontSize="10"
                         MaxWidth="{Binding ElementName=Placeholder, Path=ActualWidth}"
                         HorizontalAlignment="Left"
                         Margin="2"
                         TextWrapping="Wrap"
                         Text="{Binding ErrorContent}"
                         UseLayoutRounding="false" />
            </DataTemplate>
          </ControlTemplate.Resources>
          <StackPanel>
            <AdornedElementPlaceholder Name="Placeholder" />
            <Border x:Name="DefaultErrorViewer"
                    Visibility="Collapsed"
                    Background="Transparent">
              <TextBlock Foreground="{DynamicResource ValidationErrorBrush}"
                         FontSize="10"
                         MaxWidth="{Binding ElementName=Placeholder, Path=ActualWidth}"
                         HorizontalAlignment="Left"
                         Margin="0 2"
                         TextWrapping="Wrap"
                         Text="{Binding CurrentItem.ErrorContent}"
                         UseLayoutRounding="false" />
            </Border>
            <controlzEx:PopupEx x:Name="ValidationPopup"
                                IsOpen="False"
                                Placement="Bottom"
                                PlacementTarget="{Binding ElementName=Placeholder, Mode=OneWay}"
                                AllowsTransparency="True">
              <Border x:Name="PopupBorder"
                      Background="Transparent">
                <TextBlock Foreground="{DynamicResource ValidationErrorBrush}"
                           FontSize="10"
                           HorizontalAlignment="Left"
                           Margin="0 2"
                           TextWrapping="Wrap"
                           Text="{Binding CurrentItem.ErrorContent}"
                           UseLayoutRounding="false" />
              </Border>
            </controlzEx:PopupEx>
          </StackPanel>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(md:ValidationAssist.OnlyShowOnFocus)}"
                           Value="False" />
                <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(md:ValidationAssist.UsePopup)}"
                           Value="True" />
                <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(md:ValidationAssist.Suppress)}"
                           Value="False" />
              </MultiDataTrigger.Conditions>
              <MultiDataTrigger.Setters>
                <Setter TargetName="ValidationPopup"
                        Property="IsOpen"
                        Value="True" />
              </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(md:ValidationAssist.OnlyShowOnFocus)}"
                           Value="False" />
                <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(md:ValidationAssist.UsePopup)}"
                           Value="False" />
                <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(md:ValidationAssist.Suppress)}"
                           Value="False" />
              </MultiDataTrigger.Conditions>
              <MultiDataTrigger.Setters>
                <Setter TargetName="DefaultErrorViewer"
                        Property="Visibility"
                        Value="Visible" />
              </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(md:ValidationAssist.OnlyShowOnFocus)}"
                           Value="True" />
                <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(md:ValidationAssist.UsePopup)}"
                           Value="True" />
              </MultiDataTrigger.Conditions>
              <MultiDataTrigger.Setters>
                <Setter TargetName="ValidationPopup"
                        Property="IsOpen"
                        Value="{Binding ElementName=Placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay}" />
              </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(md:ValidationAssist.OnlyShowOnFocus)}"
                           Value="True" />
                <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(md:ValidationAssist.UsePopup)}"
                           Value="False" />
              </MultiDataTrigger.Conditions>
              <MultiDataTrigger.Setters>
                <Setter TargetName="DefaultErrorViewer"
                        Property="Visibility"
                        Value="{Binding ElementName=Placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}" />
              </MultiDataTrigger.Setters>
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="TextBoxStyleBase"
               TargetType="TextBox"
               BasedOn="{StaticResource MaterialDesignFloatingHintTextBox}">
          <Setter Property="Width"
                  Value="100" />
          <Setter Property="Height"
                  Value="40" />
          <Setter Property="Validation.ErrorTemplate"
                  Value="{StaticResource ValidationErrorTemplate}" />
        </Style>
        <Style TargetType="Grid">
          <Setter Property="Background"
                  Value="Transparent" />
        </Style>
      </Grid.Resources>
      <Grid.RowDefinitions>
        <RowDefinition Height="auto" />
        <RowDefinition Height="*" />
        <RowDefinition Height="auto" />
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="auto" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="auto" />
      </Grid.ColumnDefinitions>
      <Grid Grid.Column="1"
            Grid.Row="1"
            Margin="0,40,40,0">
        <Image Source="{Binding imageSource}"
               cycMVVM:Pan.IsEnabled="True"
               cycMVVM:Zoom.IsEnabled="True" />
      </Grid>
      <Grid Grid.Column="0"
            Grid.Row="1"
            Width="120">
        <Grid.InputBindings>
          <MouseBinding MouseAction="LeftClick"
                        Command="{Binding EnableLimitLCommand}" />
        </Grid.InputBindings>
        <Grid.Resources>
          <Style TargetType="TextBox"
                 BasedOn="{StaticResource TextBoxStyleBase}" />
        </Grid.Resources>
        <Grid.RowDefinitions>
          <RowDefinition Height="*" />
          <RowDefinition Height="*" />
          <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <TextBox Grid.Row="0"
                 md:HintAssist.Hint="Y-Axis: Max"
                 IsEnabled="{Binding EnableL}">
          <i:Interaction.Triggers>
            <i:EventTrigger EventName="TextChanged">
              <i:InvokeCommandAction Command="{Binding EnableLimitLCommand}" />
            </i:EventTrigger>
          </i:Interaction.Triggers>
          <TextBox.Text>
            <Binding Path="YMax"
                     Mode="TwoWay"
                     Converter="{cycMVVM:NumStrConverter}">
              <Binding.ValidationRules>
                <cycMVVM:DoubleValidation />
              </Binding.ValidationRules>
            </Binding>
          </TextBox.Text>
        </TextBox>
        <TextBox Grid.Row="1"
                 md:HintAssist.Hint="Y-Axis: Log Base"
                 IsEnabled="{Binding EnableL}">
          <i:Interaction.Triggers>
            <i:EventTrigger EventName="TextChanged">
              <i:InvokeCommandAction Command="{Binding EnableLimitLCommand}" />
            </i:EventTrigger>
          </i:Interaction.Triggers>
          <TextBox.Text>
            <Binding Path="YLog"
                     Mode="TwoWay"
                     Converter="{cycMVVM:NumStrConverter}">
              <Binding.ValidationRules>
                <cycMVVM:LogBaseValidation />
              </Binding.ValidationRules>
            </Binding>
          </TextBox.Text>
        </TextBox>
        <TextBox Grid.Row="2"
                 md:HintAssist.Hint="Y-Axis: Min"
                 IsEnabled="{Binding EnableL}">
          <i:Interaction.Triggers>
            <i:EventTrigger EventName="TextChanged">
              <i:InvokeCommandAction Command="{Binding EnableLimitLCommand}" />
            </i:EventTrigger>
          </i:Interaction.Triggers>
          <TextBox.Text>
            <Binding Path="YMin"
                     Mode="TwoWay"
                     Converter="{cycMVVM:NumStrConverter}">
              <Binding.ValidationRules>
                <cycMVVM:DoubleValidation />
              </Binding.ValidationRules>
            </Binding>
          </TextBox.Text>
        </TextBox>
      </Grid>
      <Grid Grid.Column="1"
            Grid.Row="2"
            Height="100">
        <Grid.InputBindings>
          <MouseBinding MouseAction="LeftClick"
                        Command="{Binding EnableLimitBCommand}" />
        </Grid.InputBindings>
        <Grid.Resources>
          <Style TargetType="TextBox"
                 BasedOn="{StaticResource TextBoxStyleBase}">
            <Setter Property="Margin"
                    Value="0,0,0,20" />
            <Setter Property="VerticalAlignment"
                    Value="Top" />
          </Style>
        </Grid.Resources>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <TextBox Grid.Column="0"
                 md:HintAssist.Hint="X-Axis: Min"
                 IsEnabled="{Binding EnableB}">
          <i:Interaction.Triggers>
            <i:EventTrigger EventName="TextChanged">
              <i:InvokeCommandAction Command="{Binding EnableLimitBCommand}" />
            </i:EventTrigger>
          </i:Interaction.Triggers>
          <TextBox.Text>
            <Binding Path="XMin"
                     Mode="TwoWay"
                     Converter="{cycMVVM:NumStrConverter}">
              <Binding.ValidationRules>
                <cycMVVM:DoubleValidation />
              </Binding.ValidationRules>
            </Binding>
          </TextBox.Text>
        </TextBox>
        <TextBox Grid.Column="1"
                 md:HintAssist.Hint="X-Axis: Log Base"
                 IsEnabled="{Binding EnableB}">
          <i:Interaction.Triggers>
            <i:EventTrigger EventName="TextChanged">
              <i:InvokeCommandAction Command="{Binding EnableLimitBCommand}" />
            </i:EventTrigger>
          </i:Interaction.Triggers>
          <TextBox.Text>
            <Binding Path="XLog"
                     Mode="TwoWay"
                     Converter="{cycMVVM:NumStrConverter}">
              <Binding.ValidationRules>
                <cycMVVM:LogBaseValidation />
              </Binding.ValidationRules>
            </Binding>
          </TextBox.Text>
        </TextBox>
        <TextBox Grid.Column="2"
                 md:HintAssist.Hint="X-Axis: Max"
                 IsEnabled="{Binding EnableB}">
          <i:Interaction.Triggers>
            <i:EventTrigger EventName="TextChanged">
              <i:InvokeCommandAction Command="{Binding EnableLimitBCommand}" />
            </i:EventTrigger>
          </i:Interaction.Triggers>
          <TextBox.Text>
            <Binding Path="XMax"
                     Mode="TwoWay"
                     Converter="{cycMVVM:NumStrConverter}">
              <Binding.ValidationRules>
                <cycMVVM:DoubleValidation />
              </Binding.ValidationRules>
            </Binding>
          </TextBox.Text>
        </TextBox>
      </Grid>
    </Grid>
  </AdornerDecorator>
</UserControl>
